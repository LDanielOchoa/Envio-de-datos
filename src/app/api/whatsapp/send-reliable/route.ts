import { NextResponse } from 'next/server';
import { Contact } from '../../../../types';
import { WhatsAppService } from '../../../../lib/whatsapp-service';
import { getTemplateByGroup, personalizeMessage } from '../../../../lib/message-templates';
import { SendingProgressManager } from '../../../../lib/sending-progress';

// Marcar la ruta como din√°mica para evitar la compilaci√≥n est√°tica
export const dynamic = 'force-dynamic';

// Configuraci√≥n para env√≠o secuencial controlado
const BATCH_SIZE = 1; // Env√≠o uno por uno
const BATCH_DELAY = 1000; // 1 segundo entre lotes
const MESSAGE_DELAY = 1000; // 2 segundos entre mensajes individuales

export async function POST(request: Request) {
    try {
        const formData = await request.formData();
        const contactsJson = formData.get('contacts') as string;
        const message = formData.get('message') as string;
        const useTemplates = formData.get('useTemplates') === 'true';
        const skipValidation = formData.get('skipValidation') === 'true'; // Nueva opci√≥n para saltar validaci√≥n
        
        // Obtener sessionId del header
        const sessionId = request.headers.get('X-Session-Id') || 'default';

        if (!contactsJson || !message) {
            return NextResponse.json({
                success: false,
                error: 'Faltan datos requeridos'
            }, { status: 400 });
        }

        const contacts = JSON.parse(contactsJson) as Contact[];
        if (contacts.length === 0) {
            return NextResponse.json({
                success: false,
                error: 'No hay contactos para enviar mensajes'
            }, { status: 400 });
        }

        const whatsappService = WhatsAppService.getInstance(sessionId);
        
        // Verificar estado del cliente antes de proceder
        const clientStatus = whatsappService.getStatus();
        console.log(`üìä [${sessionId}] Estado del cliente:`, {
            isConnected: clientStatus.isConnected,
            phoneNumber: clientStatus.phoneNumber,
            hasQR: !!clientStatus.qrCode
        });
        
        if (!clientStatus.isConnected) {
            return NextResponse.json({
                success: false,
                error: 'WhatsApp no est√° conectado. Por favor, verifica tu conexi√≥n primero.',
                details: clientStatus
            }, { status: 400 });
        }
        
        // Inicializar progreso con lista de contactos
        console.log(`üìä [${sessionId}] Inicializando progreso para ${contacts.length} contactos...`);
        SendingProgressManager.initializeProgress(sessionId, contacts.length, contacts);
        console.log(`üìä [${sessionId}] Progreso inicializado correctamente con todos los contactos en estado 'pending'`);
        
        const results: any[] = [];
        let successCount = 0;
        let errorCount = 0;
        let invalidNumbersCount = 0;
        let verifiedWhatsappCount = 0;
        let invalidNumbers: string[] = [];

        console.log(`üöÄ Iniciando env√≠o secuencial a ${contacts.length} contactos`);

        // Procesar contactos de forma secuencial (uno por uno)
        for (let i = 0; i < contacts.length; i++) {
            const contact = contacts[i];
            console.log(`üì§ Procesando contacto ${i + 1} de ${contacts.length}: ${contact.name} (${contact.phone})`);

            // Delay entre mensajes para evitar spam
            if (i > 0) {
                console.log(`‚è≥ Esperando ${MESSAGE_DELAY}ms antes del siguiente mensaje...`);
                await new Promise(resolve => setTimeout(resolve, MESSAGE_DELAY));
            }

            let finalMessage = message;

            // Personalizar mensaje con los datos del contacto
            if (useTemplates && contact.group) {
                // Si se usan plantillas, personalizar mensaje seg√∫n grupo
                console.log(`üîß [${sessionId}] Buscando plantilla para grupo: ${contact.group}`);
                const template = getTemplateByGroup(contact.group);
                if (template) {
                    console.log(`üîß [${sessionId}] Plantilla encontrada: ${template.name}`);
                    finalMessage = personalizeMessage(template.content, {
                        name: contact.name || '',
                        lastName: contact.lastName || '',
                        group: contact.group,
                        gestor: contact.gestor || ''
                    });
                } else {
                    console.log(`üîß [${sessionId}] No se encontr√≥ plantilla para grupo ${contact.group}, personalizando mensaje original`);
                    finalMessage = personalizeMessage(message, {
                        name: contact.name || '',
                        lastName: contact.lastName || '',
                        group: contact.group || '',
                        gestor: contact.gestor || ''
                    });
                }
            } else {
                // Si no se usan plantillas, personalizar el mensaje directamente
                console.log(`üîß [${sessionId}] Personalizando mensaje para contacto:`, {
                    name: contact.name,
                    lastName: contact.lastName,
                    group: contact.group,
                    gestor: contact.gestor
                });
                
                finalMessage = personalizeMessage(message, {
                    name: contact.name || '',
                    lastName: contact.lastName || '',
                    group: contact.group || '',
                    gestor: contact.gestor || ''
                });
                
                console.log(`üîß [${sessionId}] Mensaje final:`, finalMessage.substring(0, 100) + '...');
            }

            // Verificar si el n√∫mero existe en WhatsApp antes del env√≠o (opcional)
            if (!skipValidation) {
                try {
                    console.log(`üîç [${sessionId}] Verificando n√∫mero: ${contact.phone}`);
                    const isValid = await whatsappService.isNumberValid(contact.phone);
                    if (!isValid) {
                        console.log(`‚ö†Ô∏è [${sessionId}] N√∫mero no v√°lido: ${contact.phone}`);
                        invalidNumbersCount++;
                        invalidNumbers.push(contact.phone);
                        results.push({
                            contactId: contact.id,
                            status: 'invalid_number',
                            error: 'N√∫mero no registrado en WhatsApp',
                            phone: contact.phone
                        });
                        
                        // Actualizar progreso directamente como sin WhatsApp
                        SendingProgressManager.updateProgress(sessionId, contact.id, `${contact.name} ${contact.lastName}`.trim(), contact.phone, 'invalid_number', 'N√∫mero no registrado en WhatsApp');
                        
                        continue; // Continuar con el siguiente contacto
                    }
                    console.log(`‚úÖ [${sessionId}] N√∫mero v√°lido: ${contact.phone}`);
                    
                } catch (chatError: any) {
                    const errorMessage = chatError.message || '';
                    
                    // Si el error es porque el cliente no est√° disponible, continuar sin verificaci√≥n
                    if (errorMessage.includes('No hay cliente disponible') || 
                        errorMessage.includes('Cliente no est√° conectado')) {
                        console.log(`‚ö†Ô∏è [${sessionId}] Cliente no disponible para verificaci√≥n, continuando con env√≠o: ${contact.phone}`);
                        // Continuar con el env√≠o sin verificaci√≥n
                    } else {
                        console.log(`‚ö†Ô∏è [${sessionId}] No se pudo verificar n√∫mero ${contact.phone}, marcando como inv√°lido`);
                        invalidNumbersCount++;
                        invalidNumbers.push(contact.phone);
                        results.push({
                            contactId: contact.id,
                            status: 'invalid_number',
                            error: 'No se pudo verificar el n√∫mero',
                            phone: contact.phone
                        });
                        
                        // Actualizar progreso
                        console.log(`üìä [${sessionId}] Actualizando progreso para inv√°lido: ${contact.name} (${contact.phone})`);
                        SendingProgressManager.updateProgress(sessionId, contact.id, `${contact.name} ${contact.lastName}`.trim(), contact.phone, 'invalid_number', 'No se pudo verificar el n√∫mero');
                        
                        continue; // Continuar con el siguiente contacto
                    }
                }
            } else {
                console.log(`‚è≠Ô∏è [${sessionId}] Saltando verificaci√≥n para: ${contact.phone}`);
            }

            // Env√≠o del mensaje
            try {
                console.log(`üì§ [${sessionId}] Enviando mensaje a: ${contact.phone}`);
                await whatsappService.sendMessage(contact.phone, finalMessage);
                
                successCount++;
                results.push({
                    contactId: contact.id,
                    status: 'success',
                    phone: contact.phone
                });
                
                // Actualizar progreso
                console.log(`üìä [${sessionId}] Actualizando progreso para √©xito: ${contact.name} (${contact.phone})`);
                SendingProgressManager.updateProgress(sessionId, contact.id, `${contact.name} ${contact.lastName}`.trim(), contact.phone, 'success');
                
                console.log(`‚úÖ [${sessionId}] Mensaje enviado exitosamente a ${contact.name} (${contact.phone})`);
                
            } catch (error: any) {
                console.error(`‚ùå [${sessionId}] Error enviando a ${contact.phone}:`, error);
                
                // Detectar si es un error de n√∫mero no v√°lido
                const errorMessage = error.message || 'Error desconocido';
                if (errorMessage.includes('not-authorized') || 
                    errorMessage.includes('not-found') || 
                    errorMessage.includes('invalid') ||
                    errorMessage.includes('no existe') ||
                    errorMessage.includes('N√∫mero no registrado')) {
                    invalidNumbersCount++;
                    invalidNumbers.push(contact.phone);
                    results.push({
                        contactId: contact.id,
                        status: 'invalid_number',
                        error: 'N√∫mero no registrado en WhatsApp',
                        phone: contact.phone
                    });
                    
                    // Actualizar progreso
                    console.log(`üìä [${sessionId}] Actualizando progreso para inv√°lido (error): ${contact.name} (${contact.phone})`);
                    SendingProgressManager.updateProgress(sessionId, contact.id, `${contact.name} ${contact.lastName}`.trim(), contact.phone, 'invalid_number', 'N√∫mero no registrado en WhatsApp');
                } else {
                    errorCount++;
                    results.push({
                        contactId: contact.id,
                        status: 'error',
                        error: errorMessage,
                        phone: contact.phone
                    });
                    
                    // Actualizar progreso
                    console.log(`üìä [${sessionId}] Actualizando progreso para error: ${contact.name} (${contact.phone}) - ${errorMessage}`);
                    SendingProgressManager.updateProgress(sessionId, contact.id, `${contact.name} ${contact.lastName}`.trim(), contact.phone, 'error', errorMessage);
                }
            }

            // Actualizar progreso despu√©s de cada mensaje
            console.log(`üìä Progreso: ${i + 1}/${contacts.length} mensajes procesados`);
            console.log(`üìà Estad√≠sticas actuales: ‚úÖ ${successCount} exitosos | ‚ùå ${errorCount} fallidos | ‚ö†Ô∏è ${invalidNumbersCount} inv√°lidos | üì± ${verifiedWhatsappCount} con WhatsApp`);
        }

        console.log(`üéâ Env√≠o completado: ${successCount} exitosos, ${errorCount} fallidos, ${invalidNumbersCount} n√∫meros inv√°lidos, ${verifiedWhatsappCount} con WhatsApp`);
        
        // Marcar progreso como completado para que el modal pueda mostrar los resultados finales
        SendingProgressManager.markAsComplete(sessionId);
        console.log(`üìä [${sessionId}] Progreso marcado como completado y disponible para consulta`);

        return NextResponse.json({
            success: true,
            data: {
                results,
                successCount,
                errorCount,
                invalidNumbersCount,
                verifiedWhatsappCount,
                invalidNumbers,
                total: contacts.length,
                useTemplates
            }
        });

    } catch (error) {
        console.error('Error al enviar mensajes:', error);
        return NextResponse.json({
            success: false,
            error: error instanceof Error ? error.message : 'Error desconocido'
        }, { status: 500 });
    }
}