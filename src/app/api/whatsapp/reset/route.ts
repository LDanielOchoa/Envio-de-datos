import { NextResponse } from 'next/server';
import { WhatsAppService } from '../../../../lib/whatsapp-service';

// Marcar la ruta como din√°mica para evitar la compilaci√≥n est√°tica
export const dynamic = 'force-dynamic';

export async function POST(request: Request) {
  try {
    // Obtener sessionId del header
    const sessionId = request.headers.get('X-Session-Id') || 'default';
    
    console.log(`üîÑ API: Reiniciando WhatsApp completamente para sesi√≥n ${sessionId}...`);
    
    const whatsappService = WhatsAppService.getInstance(sessionId);
    
    // Limpiar completamente el servicio
    await whatsappService.disconnect();
    
    // Limpiar archivos de autenticaci√≥n espec√≠ficos de la sesi√≥n
    try {
      const fs = require('fs');
      const path = require('path');
      const authPath = path.join(process.cwd(), '.wwebjs_auth', sessionId);
      
      if (fs.existsSync(authPath)) {
        console.log(`üóëÔ∏è API: Eliminando datos de autenticaci√≥n para sesi√≥n ${sessionId}...`);
        fs.rmSync(authPath, { recursive: true, force: true });
        console.log(`‚úÖ API: Datos de autenticaci√≥n eliminados para sesi√≥n ${sessionId}`);
      }
    } catch (error) {
      console.log(`‚ö†Ô∏è API: Error limpiando autenticaci√≥n para sesi√≥n ${sessionId}:`, error);
    }
    
    console.log(`‚úÖ API: WhatsApp reiniciado completamente para sesi√≥n ${sessionId}`);
    
    return NextResponse.json({
      success: true,
      message: 'WhatsApp reiniciado completamente - listo para nuevo QR'
    });
    
  } catch (error) {
    console.error('‚ùå API Error reiniciando WhatsApp:', error);
    return NextResponse.json(
      { success: false, error: error instanceof Error ? error.message : 'Error desconocido' },
      { status: 500 }
    );
  }
} 