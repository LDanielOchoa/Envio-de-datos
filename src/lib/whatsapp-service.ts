import { Client, LocalAuth, MessageMedia } from 'whatsapp-web.js';
import qrcode from 'qrcode';
import { notifyConnectionChange } from './connection-events';

// Variables globales para manejar m√∫ltiples sesiones de WhatsApp
declare global {
  var whatsappSessions: {
    [sessionId: string]: {
      client: Client | null;
      state: {
        isConnected: boolean;
        phoneNumber?: string;
        lastSeen?: Date | null;
      };
    };
  };
  
  var whatsappGlobalClient: Client | null;
  var whatsappGlobalState: {
    isConnected: boolean;
    phoneNumber: string;
    lastSeen: Date | null;
  } | null;
}

// Inicializar variable global si no existe
if (!(globalThis as any).whatsappSessions) {
  (globalThis as any).whatsappSessions = {};
}

export interface WhatsAppStatus {
  isConnected: boolean;
  qrCode: string;
  phoneNumber: string;
  lastSeen: Date | null;
}

export class WhatsAppService {
  private client: Client | null = null;
  private isConnected: boolean = false;
  private qrCode: string = '';
  private persistentQR: string = ''; // QR que se mantiene hasta conexi√≥n
  private phoneNumber: string = '';
  private lastSeen: Date | null = null;
  private isInitializing: boolean = false;
  private sessionId: string;
  private static instances: { [sessionId: string]: WhatsAppService } = {};

  constructor(sessionId: string = 'default') {
    this.sessionId = sessionId;
    
    // Restaurar cliente de sesi√≥n si existe
    const session = (globalThis as any).whatsappSessions[sessionId];
    if (session?.client) {
      console.log(`üîÑ Restaurando cliente de sesi√≥n ${sessionId}...`);
      this.client = session.client;
      
      // Restaurar estado de sesi√≥n
      if (session.state) {
        console.log(`‚úÖ Restaurando estado de sesi√≥n ${sessionId}:`, session.state);
        this.isConnected = session.state.isConnected;
        this.phoneNumber = session.state.phoneNumber || '';
        this.lastSeen = session.state.lastSeen || null;
        this.qrCode = '';
        this.persistentQR = '';
      }
      
      // Verificar tambi√©n info del cliente
      if (session.client.info?.wid?.user) {
        console.log(`‚úÖ Cliente de sesi√≥n ${sessionId} conectado como:`, session.client.info.wid.user);
        this.isConnected = true;
        this.phoneNumber = session.client.info.wid.user;
        this.lastSeen = new Date();
        this.qrCode = '';
        this.persistentQR = '';
        this.saveSessionState();
      }
    }
  }

  // Singleton pattern por sesi√≥n
  public static getInstance(sessionId: string = 'default'): WhatsAppService {
    if (!WhatsAppService.instances[sessionId]) {
      WhatsAppService.instances[sessionId] = new WhatsAppService(sessionId);
    }
    return WhatsAppService.instances[sessionId];
  }

  private createClient(): Client {
    console.log(`üîÑ Creando nuevo cliente WhatsApp para sesi√≥n ${this.sessionId}...`);
    
    const client = new Client({
      authStrategy: new LocalAuth({
        clientId: this.sessionId
      }),
      puppeteer: {
        headless: true,
        args: [
          '--no-sandbox',
          '--disable-setuid-sandbox',
          '--disable-dev-shm-usage',
          '--disable-accelerated-2d-canvas',
          '--no-first-run',
          '--no-zygote',
          '--single-process',
          '--disable-gpu',
          '--disable-web-security',
          '--disable-features=VizDisplayCompositor',
          '--disable-background-timer-throttling',
          '--disable-backgrounding-occluded-windows',
          '--disable-renderer-backgrounding'
        ]
      }
    });

    this.setupEventListeners(client);
    return client;
  }

  private setupEventListeners(client: Client) {
    client.on('qr', async (qr) => {
      try {
        console.log('üì± QR Code recibido, generando imagen...');
        const qrImage = await qrcode.toDataURL(qr);
        console.log('‚úÖ QR Code generado, longitud:', qrImage.length);
        
        // Guardar en ambas variables
        this.isConnected = false;
        this.phoneNumber = '';
        this.lastSeen = null;
        this.qrCode = qrImage;
        this.persistentQR = qrImage; // Mantener copia persistente
        
        console.log('üì± QR Code guardado permanentemente hasta conexi√≥n');
      } catch (error) {
        console.error('‚ùå Error al generar QR code:', error);
      }
    });

    client.on('ready', () => {
      console.log('‚úÖ CLIENTE WHATSAPP CONECTADO Y LISTO!');
      this.isConnected = true;
      this.qrCode = '';
      this.persistentQR = ''; // Limpiar tambi√©n QR persistente
      this.phoneNumber = client.info?.wid?.user || '';
      this.lastSeen = new Date();
      console.log('üéâ WhatsApp conectado exitosamente como:', this.phoneNumber);
      console.log('üì± QR limpiado - conexi√≥n establecida');
    });

    client.on('disconnected', () => {
      console.log('‚ùå Cliente WhatsApp desconectado');
      this.isConnected = false;
      this.phoneNumber = '';
      this.lastSeen = null;
      this.qrCode = '';
    });

    client.on('auth_failure', () => {
      console.error('‚ùå Error de autenticaci√≥n de WhatsApp');
      this.isConnected = false;
      this.phoneNumber = '';
      this.lastSeen = null;
    });

    client.on('loading_screen', (percent, message) => {
      console.log(`üì± Cargando WhatsApp: ${percent}% - ${message}`);
    });
  }

  async initialize(): Promise<void> {
    if (this.isInitializing) {
      console.log('‚ö†Ô∏è WhatsApp ya est√° inicializando...');
      return;
    }

    try {
      this.isInitializing = true;
      console.log('üöÄ Inicializando cliente WhatsApp...');

      // Si ya hay un cliente, destruirlo primero
      if (this.client) {
        console.log('üîÑ Destruyendo cliente anterior...');
        try {
          await this.client.destroy();
        } catch (error) {
          console.log('‚ö†Ô∏è Error al destruir cliente anterior (normal):', error);
        }
        this.client = null;
      }

      // Crear nuevo cliente
      this.client = this.createClient();
      
      // Inicializar
      await this.client.initialize();
      console.log('‚úÖ Cliente WhatsApp inicializado correctamente');
      
    } catch (error) {
      console.error('‚ùå Error al inicializar WhatsApp:', error);
      
      // Si hay error, limpiar estado
      this.isConnected = false;
      this.phoneNumber = '';
      this.lastSeen = null;
      this.qrCode = '';
      
      // Si el cliente existe, intentar destruirlo
      if (this.client) {
        try {
          await this.client.destroy();
        } catch (destroyError) {
          console.log('‚ö†Ô∏è Error al destruir cliente despu√©s de error:', destroyError);
        }
        this.client = null;
      }
      
      throw error;
    } finally {
      this.isInitializing = false;
    }
  }

  async disconnect(): Promise<void> {
    try {
      console.log('üîÑ Desconectando cliente WhatsApp...');
      
      if (this.client) {
        try {
          await this.client.destroy();
        } catch (error) {
          console.log('‚ö†Ô∏è Error al destruir cliente (normal):', error);
        }
        this.client = null;
      }
      
      // Limpiar estado
      this.isConnected = false;
      this.phoneNumber = '';
      this.lastSeen = null;
      this.qrCode = '';
      
      console.log('‚úÖ Cliente WhatsApp desconectado completamente');
    } catch (error) {
      console.error('‚ùå Error al desconectar:', error);
      // A√∫n as√≠, limpiar el estado
      this.isConnected = false;
      this.phoneNumber = '';
      this.lastSeen = null;
      this.qrCode = '';
      this.client = null;
    }
  }

  async forceQRGeneration(): Promise<string> {
    try {
      console.log('üì± FORZANDO GENERACI√ìN DE QR - M√âTODO DEFINITIVO MEJORADO');
      
      // 1. Verificar si ya est√° conectado ANTES de hacer nada
      if (this.client?.info?.wid?.user) {
        console.log('‚úÖ Cliente ya est√° conectado como:', this.client.info.wid.user);
        this.isConnected = true;
        this.phoneNumber = this.client.info.wid.user;
        this.qrCode = '';
        this.persistentQR = '';
        throw new Error('WhatsApp ya est√° conectado');
      }
      
      // 2. Limpiar COMPLETAMENTE
      console.log('üßπ Limpiando estado completamente...');
      this.isConnected = false;
      this.phoneNumber = '';
      this.lastSeen = null;
      this.qrCode = '';
      this.persistentQR = '';
      
      // 3. Destruir cliente completamente y limpiar datos de autenticaci√≥n
      if (this.client) {
        try {
          console.log('üóëÔ∏è Destruyendo cliente existente...');
          await this.client.destroy();
          console.log('‚úÖ Cliente destruido');
        } catch (error) {
          console.log('‚ö†Ô∏è Error destruyendo cliente:', error);
        }
        this.client = null;
      }

      // 4. Limpiar archivos de autenticaci√≥n (mejorado para Windows)
      try {
        const fs = require('fs');
        const path = require('path');
        const authPath = path.join(process.cwd(), '.wwebjs_auth');
        
        if (fs.existsSync(authPath)) {
          console.log('üóëÔ∏è Intentando limpiar datos de autenticaci√≥n...');
          
          // Funci√≥n recursiva para limpiar con reintentos
          const cleanupWithRetry = async (dirPath: string, retries = 3) => {
            for (let attempt = 1; attempt <= retries; attempt++) {
              try {
                // Intentar eliminar de forma menos agresiva
                const items = fs.readdirSync(dirPath);
                for (const item of items) {
                  const itemPath = path.join(dirPath, item);
                  const stat = fs.statSync(itemPath);
                  
                  if (stat.isDirectory()) {
                    await cleanupWithRetry(itemPath, 1); // Solo 1 reintento para subdirectorios
                    try {
                      fs.rmdirSync(itemPath);
                    } catch (e: any) {
                      console.log(`‚ö†Ô∏è No se pudo eliminar directorio ${itemPath}:`, e.message);
                    }
                  } else {
                    try {
                      fs.unlinkSync(itemPath);
                    } catch (e: any) {
                      if (e.code === 'EBUSY' || e.code === 'ENOENT') {
                        console.log(`‚ö†Ô∏è Archivo ocupado, saltando: ${itemPath}`);
                      } else {
                        console.log(`‚ö†Ô∏è Error eliminando ${itemPath}:`, e.message);
                      }
                    }
                  }
                }
                
                // Intentar eliminar el directorio principal
                try {
                  fs.rmdirSync(dirPath);
                  console.log(`‚úÖ Directorio eliminado: ${dirPath}`);
                } catch (e: any) {
                  console.log(`‚ö†Ô∏è No se pudo eliminar directorio principal: ${e.message}`);
                }
                
                break; // Salir si fue exitoso
              } catch (error: any) {
                console.log(`‚ö†Ô∏è Intento ${attempt} fall√≥:`, error.message);
                if (attempt < retries) {
                  await new Promise(resolve => setTimeout(resolve, 1000 * attempt));
                }
              }
            }
          };
          
          await cleanupWithRetry(authPath);
          console.log('‚úÖ Limpieza de autenticaci√≥n completada (algunos archivos pueden quedar)');
        }
              } catch (error: any) {
          console.log('‚ö†Ô∏è Error general limpiando autenticaci√≥n:', error.message);
        }
      
      // 5. Esperar para asegurar limpieza completa
      console.log('‚è≥ Esperando limpieza completa...');
      await new Promise(resolve => setTimeout(resolve, 3000));
      
      // 6. Crear cliente completamente nuevo
      console.log('üîÑ Creando cliente completamente FRESCO...');
      this.client = new Client({
        authStrategy: new LocalAuth({
          clientId: 'whatsapp-main', // ID fijo y simple
          dataPath: './.wwebjs_auth'
        }),
        puppeteer: {
          headless: true,
          args: [
            '--no-sandbox',
            '--disable-setuid-sandbox',
            '--disable-dev-shm-usage',
            '--disable-accelerated-2d-canvas',
            '--no-first-run',
            '--no-zygote',
            '--disable-gpu',
            '--disable-web-security',
            '--disable-features=VizDisplayCompositor'
          ]
        }
      });
      
      // Guardar referencia global para persistencia
      globalThis.whatsappGlobalClient = this.client;
      console.log('üíæ Cliente guardado en referencia global');
      
      // 7. Setup de eventos b√°sicos primero
      this.client.on('loading_screen', (percent, message) => {
        console.log(`üì± Cargando WhatsApp: ${percent}% - ${message}`);
      });

      this.client.on('authenticated', () => {
        console.log('‚úÖ CLIENTE WHATSAPP AUTENTICADO!');
      });

             this.client.on('ready', () => {
         console.log('‚úÖ CLIENTE WHATSAPP CONECTADO Y LISTO!');
         this.isConnected = true;
         this.qrCode = '';
         this.persistentQR = '';
         this.phoneNumber = this.client?.info?.wid?.user || '';
         this.lastSeen = new Date();
         console.log('üéâ WhatsApp conectado exitosamente como:', this.phoneNumber);
         console.log('üíæ Estado guardado - Cliente activo y listo');
         
         // Asegurar que la referencia de sesi√≥n est√© actualizada
         this.saveSessionState();
         console.log(`üîí Cliente conectado guardado en sesi√≥n ${this.sessionId}`);
         
         // Notificar cambio de conexi√≥n al frontend
         this.notifyConnectionChange();
       });

      this.client.on('disconnected', (reason) => {
        console.log('‚ùå Cliente WhatsApp desconectado:', reason);
        this.isConnected = false;
        this.phoneNumber = '';
        this.lastSeen = null;
      });
      
      // 8. Promesa para QR con m√∫ltiples intentos
      return new Promise<string>((resolve, reject) => {
        let qrReceived = false;
        
        const timeout = setTimeout(() => {
          if (!qrReceived) {
            console.error('‚è∞ TIMEOUT FINAL - No se recibi√≥ QR en 60 segundos');
            reject(new Error('Timeout: No se gener√≥ QR en 60 segundos - posible problema de red'));
          }
        }, 60000); // 60 segundos
        
                 // Listener para QR - SOLO UNA VEZ
         this.client!.once('qr', async (qr) => {
           try {
             if (qrReceived) {
               console.log('‚ö†Ô∏è QR ya recibido, ignorando...');
               return;
             }
             
             qrReceived = true;
             console.log('üéØ QR RECIBIDO! Generando imagen...');
             clearTimeout(timeout);
            
            const qrImage = await qrcode.toDataURL(qr, { 
              width: 300, 
              margin: 3,
              color: {
                dark: '#000000',
                light: '#FFFFFF'
              },
              errorCorrectionLevel: 'M'
            });
            
            this.qrCode = qrImage;
            this.persistentQR = qrImage;
            this.lastSeen = new Date();
            
            console.log('‚úÖ QR GUARDADO EXITOSAMENTE - Longitud:', qrImage.length);
            console.log('üéâ QR GENERADO Y LISTO PARA ESCANEAR!');
            
            resolve(qrImage);
          } catch (error) {
            clearTimeout(timeout);
            console.error('‚ùå Error generando imagen QR:', error);
            reject(error);
          }
        });
        
        // Listener para conexi√≥n directa (si se autentica r√°pido)
        this.client!.on('ready', () => {
          if (!qrReceived) {
            clearTimeout(timeout);
            console.log('‚úÖ Cliente conectado directamente sin QR');
            this.isConnected = true;
            this.phoneNumber = this.client?.info?.wid?.user || '';
            this.qrCode = '';
            this.persistentQR = '';
            reject(new Error('WhatsApp conectado directamente - no necesita QR'));
          }
        });
        
        // 9. Inicializar cliente con manejo de errores
        console.log('üöÄ Inicializando cliente FRESCO...');
        this.client!.initialize().catch((error) => {
          if (!qrReceived) {
            clearTimeout(timeout);
            console.error('‚ùå Error inicializando cliente:', error);
            reject(new Error(`Error de inicializaci√≥n: ${error.message}`));
          }
        });
      });
      
    } catch (error) {
      console.error('‚ùå ERROR CR√çTICO en forceQRGeneration:', error);
      throw new Error(`Error cr√≠tico generando QR: ${error instanceof Error ? error.message : 'Error desconocido'}`);
    }
  }

  async refreshStatus(): Promise<WhatsAppStatus> {
    try {
      console.log('üîç refreshStatus - SOLO verificar, NO tocar QR');
      
      // Si no hay cliente, crear uno
      if (!this.client) {
        console.log('üîÑ No hay cliente, creando uno nuevo...');
        await this.initialize();
      }
      
      // SOLO verificar conexi√≥n, NO tocar el QR
      if (this.client?.info?.wid?.user) {
        console.log('üì± Cliente detectado como conectado:', this.client.info.wid.user);
        this.isConnected = true;
        this.phoneNumber = this.client.info.wid.user;
        this.lastSeen = new Date();
        // NO TOCAR EL QR AQU√ç
      } else if (this.client?.pupPage) {
        console.log('üì± Cliente en proceso de conexi√≥n...');
        // NO tocar nada
      } else {
        console.log('üì± Cliente no conectado');
        // NO tocar el QR
      }
      
      return this.getStatus();
    } catch (error) {
      console.error('‚ùå Error en refreshStatus:', error);
      return this.getStatus();
    }
  }

  getStatus(): WhatsAppStatus {
    console.log('üìä getStatus - Verificando estado actual...');
    
    if (this.client && this.client.info) {
      console.log('üìä Cliente info:', this.client.info.wid.user);
      const status: WhatsAppStatus = {
        isConnected: true,
        phoneNumber: this.client.info.wid.user,
        lastSeen: this.lastSeen || null,
        qrCode: ''  // Cuando est√° conectado, qrCode es cadena vac√≠a
      };
      console.log('üìä Estado guardado - isConnected:', status.isConnected, 'phone:', status.phoneNumber);
      console.log('‚úÖ Estado conectado confirmado desde memoria:', status.phoneNumber);
      console.log('üìä ESTADO FINAL (CONECTADO):', { isConnected: status.isConnected, qrLength: 0, phoneNumber: status.phoneNumber });
      return status;
    }
    
    console.log('üìä Cliente info: No disponible');
    const status: WhatsAppStatus = {
      isConnected: this.isConnected,
      phoneNumber: this.phoneNumber || '',
      lastSeen: this.lastSeen || null,
      qrCode: this.qrCode || this.persistentQR || ''
    };
    console.log('üìä Estado guardado - isConnected:', status.isConnected, 'phone:', status.phoneNumber);
    console.log('üìä ESTADO FINAL (NO CONECTADO):', { isConnected: status.isConnected, qrLength: status.qrCode.length || 0, phoneNumber: status.phoneNumber });
    return status;
  }

  async sendMessage(phone: string, message: string): Promise<boolean> {
    try {
      console.log(`üì§ [${this.sessionId}] Intentando enviar mensaje a ${phone}`);
      console.log(`üìä [${this.sessionId}] Par√°metros:`, {
        messageLength: message.length
      });
      
      // Verificaci√≥n completa del estado
      if (!this.client) {
        console.log(`‚ùå [${this.sessionId}] No hay cliente disponible`);
        throw new Error('WhatsApp no est√° conectado');
      }

      // Verificar que el cliente tenga informaci√≥n de conexi√≥n
      if (!this.client.info?.wid?.user) {
        console.log(`‚ö†Ô∏è [${this.sessionId}] Cliente sin informaci√≥n de conexi√≥n`);
        throw new Error('WhatsApp no est√° completamente conectado');
      }

      // Verificar que el cliente est√© listo
      if (!this.client.pupPage) {
        console.log(`‚ö†Ô∏è [${this.sessionId}] Cliente no est√° listo (sin p√°gina Puppeteer)`);
        throw new Error('WhatsApp no est√° listo para enviar mensajes');
      }

      // Formatear n√∫mero de tel√©fono
      const formattedPhone = phone.includes('@c.us') ? phone : `${phone}@c.us`;
      console.log(`üì± [${this.sessionId}] Enviando a: ${formattedPhone}`);

      // Env√≠o solo texto
      console.log(`üí¨ [${this.sessionId}] Enviando mensaje de texto`);
      const result = await this.client.sendMessage(formattedPhone, message);
      console.log(`‚úÖ [${this.sessionId}] Texto enviado exitosamente:`, result.id._serialized);

      console.log(`‚úÖ [${this.sessionId}] Mensaje enviado exitosamente a ${phone}`);
      return true;
    } catch (error: any) {
      console.error(`‚ùå [${this.sessionId}] Error enviando mensaje a ${phone}:`, error);
      
      // Detectar errores espec√≠ficos de n√∫meros no v√°lidos
      const errorMessage = error.message || '';
      if (errorMessage.includes('not-found') || 
          errorMessage.includes('not-authorized') || 
          errorMessage.includes('invalid') ||
          errorMessage.includes('no existe') ||
          errorMessage.includes('number not found')) {
        console.log(`‚ùå [${this.sessionId}] N√∫mero ${phone} no v√°lido - error espec√≠fico detectado`);
        throw new Error('N√∫mero no registrado en WhatsApp');
      }
      
      throw error;
    }
  }

  // M√©todo para verificar si un n√∫mero existe en WhatsApp
  async isNumberValid(phone: string): Promise<boolean> {
    try {
      if (!this.client) {
        console.log(`‚ùå [${this.sessionId}] No hay cliente disponible para verificar n√∫mero`);
        throw new Error('No hay cliente disponible para verificar n√∫mero');
      }

      // Verificar que el cliente est√© conectado
      if (!this.client.info?.wid?.user) {
        console.log(`‚ùå [${this.sessionId}] Cliente no est√° conectado para verificar n√∫mero`);
        throw new Error('Cliente no est√° conectado para verificar n√∫mero');
      }

      const formattedPhone = phone.includes('@c.us') ? phone : `${phone}@c.us`;
      
      try {
        // Intentar obtener informaci√≥n del chat para verificar si existe
        const chat = await this.client.getChatById(formattedPhone);
        
        // Verificar si el chat existe y tiene informaci√≥n v√°lida
        const isValid = Boolean(chat && chat.id && chat.id.user);
        
        console.log(`üîç [${this.sessionId}] Verificaci√≥n de n√∫mero ${phone}: ${isValid ? 'V√ÅLIDO' : 'NO V√ÅLIDO'}`);
        
        if (isValid) {
          console.log(`‚úÖ [${this.sessionId}] N√∫mero ${phone} verificado como v√°lido`);
        } else {
          console.log(`‚ùå [${this.sessionId}] N√∫mero ${phone} verificado como NO v√°lido`);
        }
        return isValid;
      } catch (chatError: any) {
        // Si el error indica que el n√∫mero no existe, es inv√°lido
        const errorMessage = chatError.message || '';
        if (errorMessage.includes('not-found') || 
            errorMessage.includes('not-authorized') || 
            errorMessage.includes('invalid') ||
            errorMessage.includes('no existe')) {
          console.log(`‚ùå [${this.sessionId}] N√∫mero ${phone} NO existe en WhatsApp`);
          return false;
        }
        
        console.log(`‚ö†Ô∏è [${this.sessionId}] Error verificando n√∫mero ${phone}:`, chatError.message);
        return false;
      }
    } catch (error) {
      console.error(`‚ùå [${this.sessionId}] Error verificando n√∫mero ${phone}:`, error);
      return false;
    }
  }

  // M√©todo para obtener QR sin tocar estado
  getQROnly(): string {
    const qr = this.qrCode || this.persistentQR;
    console.log('üìä getQROnly - QR length:', qr.length);
    return qr;
  }

  // M√©todo para forzar la detecci√≥n de conexi√≥n
  async forceConnectionCheck(): Promise<WhatsAppStatus> {
    try {
      console.log('üîç Forzando verificaci√≥n de conexi√≥n...');
      console.log('üìä Estado actual guardado:', { 
        isConnected: this.isConnected, 
        phoneNumber: this.phoneNumber,
        hasClient: !!this.client 
      });
      
      if (!this.client) {
        console.log('‚ùå No hay cliente local - verificando referencia global...');
        
        // Verificar si hay cliente en la referencia global
        if (globalThis.whatsappGlobalClient) {
          console.log('üîÑ Restaurando desde referencia global...');
          this.client = globalThis.whatsappGlobalClient;
          
          // Restaurar estado global tambi√©n
          if (globalThis.whatsappGlobalState) {
            console.log('‚úÖ Restaurando estado global completo:', globalThis.whatsappGlobalState);
            this.isConnected = globalThis.whatsappGlobalState.isConnected;
            this.phoneNumber = globalThis.whatsappGlobalState.phoneNumber || '';
            this.lastSeen = globalThis.whatsappGlobalState.lastSeen || null;
            this.qrCode = '';
            this.persistentQR = '';
            return this.getStatus();
          }
          
          // Verificar si est√° conectado desde info del cliente
          const session = (globalThis as any).whatsappSessions[this.sessionId];
          if (session?.client?.info?.wid?.user) {
            console.log(`‚úÖ Cliente de sesi√≥n ${this.sessionId} conectado:`, session.client.info.wid.user);
            this.isConnected = true;
            this.phoneNumber = session.client.info.wid.user;
            this.lastSeen = new Date();
            this.qrCode = '';
            this.persistentQR = '';
            this.saveSessionState();
            return this.getStatus();
          }
        }
        
        // Si no hay cliente global pero creemos estar conectados, crear uno
        if (this.isConnected && this.phoneNumber) {
          console.log('üîÑ Recreando cliente para usuario conectado...');
          await this.initialize();
          return this.getStatus();
        }
        
        console.log('‚ùå No hay cliente disponible en ninguna referencia');
        return this.getStatus();
      }
      
      // Si ya tenemos estado conectado guardado, verificar que siga siendo cierto
      if (this.isConnected && this.phoneNumber) {
        console.log('‚úÖ Estado conectado confirmado desde memoria:', this.phoneNumber);
        
        // Verificar si el cliente tambi√©n tiene la info
        if (this.client.info?.wid?.user) {
          console.log('‚úÖ Cliente tambi√©n confirma conexi√≥n:', this.client.info.wid.user);
          this.lastSeen = new Date();
          return this.getStatus();
        } else {
          console.log('‚ö†Ô∏è Cliente perdi√≥ info pero estado dice conectado');
          // Mantener el estado conectado por ahora
          return this.getStatus();
        }
      }
      
      // Intentar obtener informaci√≥n del cliente si no tenemos estado
      if (this.client.info?.wid?.user) {
        console.log('üéâ ¬°NUEVA CONEXI√ìN DETECTADA!:', this.client.info.wid.user);
        this.isConnected = true;
        this.phoneNumber = this.client.info.wid.user;
        this.lastSeen = new Date();
        // Limpiar QR solo al detectar nueva conexi√≥n
        this.qrCode = '';
        this.persistentQR = '';
        return this.getStatus();
      }
      
      // Si no hay info pero hay p√°gina, puede estar conectando
      if (this.client.pupPage) {
        console.log('üì± Cliente en proceso, manteniendo estado actual...');
        return this.getStatus();
      }
      
      console.log('‚ùå Cliente no conectado');
      return this.getStatus();
    } catch (error) {
      console.error('‚ùå Error en forceConnectionCheck:', error);
      return this.getStatus();
    }
  }

  private formatPhoneNumber(phone: string): string {
    let cleaned = phone.replace(/\D/g, '');
    if (cleaned.startsWith('+')) {
      cleaned = cleaned.substring(1);
    }
    return cleaned + '@c.us';
  }

  // M√©todo para guardar estado de sesi√≥n
  private saveSessionState() {
    if (!(globalThis as any).whatsappSessions[this.sessionId]) {
      (globalThis as any).whatsappSessions[this.sessionId] = {
        client: null,
        state: {
          isConnected: false,
          phoneNumber: '',
          lastSeen: null
        }
      };
    }
    
    (globalThis as any).whatsappSessions[this.sessionId].client = this.client;
    (globalThis as any).whatsappSessions[this.sessionId].state = {
      isConnected: this.isConnected,
      phoneNumber: this.phoneNumber,
      lastSeen: this.lastSeen
    };
    console.log(`üíæ Estado guardado para sesi√≥n ${this.sessionId}:`, (globalThis as any).whatsappSessions[this.sessionId].state);
  }

  // M√©todo para verificar si un mensaje se entreg√≥ (retorna boolean)
  private async checkMessageDelivery(message: any, type: string): Promise<boolean> {
    try {
      console.log(`üîç Verificando entrega de ${type}...`);
      
      // Esperar m√°s tiempo para im√°genes
      const waitTime = type.includes('imagen') ? 5000 : 3000;
      await new Promise(resolve => setTimeout(resolve, waitTime));
      
      let isDelivered = false;
      
      // Verificar ACK (acknowledgment) - m√°s estricto
      try {
        const info = await message.getInfo();
        console.log(`üìä Info de ${type}:`, {
          delivery: info.delivery.length,
          read: info.read.length,
          ack: message.ack
        });
        
        // ACK 2 = entregado, ACK 3 = le√≠do
        if (message.ack >= 2) {
          console.log(`‚úÖ ${type} CONFIRMADO por ACK: ${message.ack}`);
          isDelivered = true;
        } else if (message.ack === 1) {
          console.log(`‚ö†Ô∏è ${type} solo enviado al servidor (ACK=1)`);
        } else {
          console.log(`‚ùå ${type} sin ACK confirmado (ACK=${message.ack})`);
        }
        
      } catch (infoError: any) {
        console.log(`‚ö†Ô∏è No se pudo obtener info de ${type}:`, infoError.message);
      }
      
      // Verificar si existe en el chat como respaldo
      try {
        const chatId = message.id.remote;
        const chat = await this.client?.getChatById(chatId);
        
        if (chat) {
          const messages = await chat.fetchMessages({ limit: 10 });
          const messageExists = messages.some(msg => msg.id._serialized === message.id._serialized);
          
          if (messageExists) {
            console.log(`‚úÖ ${type} ENCONTRADO en el chat`);
            isDelivered = true;
          } else {
            console.log(`‚ùå ${type} NO encontrado en el chat`);
          }
        }
        
      } catch (chatError: any) {
        console.log(`‚ö†Ô∏è No se pudo verificar ${type} en el chat:`, chatError.message);
      }
      
      return isDelivered;
      
    } catch (error: any) {
      console.log(`‚ùå Error verificando entrega de ${type}:`, error.message);
      return false;
    }
  }

  // M√©todo para verificar si un mensaje realmente se entreg√≥ (solo logs)
  private async verifyMessageDelivery(message: any, type: string): Promise<void> {
    try {
      console.log(`üîç Verificando entrega de ${type}...`);
      
      // Esperar m√°s tiempo para im√°genes
      const waitTime = type.includes('imagen') ? 5000 : 3000;
      await new Promise(resolve => setTimeout(resolve, waitTime));
      
      // Intentar obtener informaci√≥n del mensaje
      try {
        const info = await message.getInfo();
        console.log(`üìä Info de ${type}:`, {
          delivery: info.delivery.length,
          read: info.read.length,
          ack: message.ack
        });
        
        // Verificar ACK (acknowledgment)
        if (message.ack) {
          if (message.ack === 1) {
            console.log(`‚úÖ ${type} ENVIADO al servidor WhatsApp`);
          } else if (message.ack === 2) {
            console.log(`‚úÖ ${type} ENTREGADO al dispositivo`);
          } else if (message.ack === 3) {
            console.log(`‚úÖ ${type} LE√çDO por el usuario`);
          } else {
            console.log(`‚ö†Ô∏è ${type} ACK desconocido: ${message.ack}`);
          }
        } else {
          console.log(`‚ö†Ô∏è ${type} sin ACK confirmado`);
        }
        
      } catch (infoError: any) {
        console.log(`‚ö†Ô∏è No se pudo obtener info de ${type}:`, infoError.message);
      }
      
      // Verificar si el mensaje existe en el chat
      try {
        const chatId = message.id.remote;
        const chat = await this.client?.getChatById(chatId);
        
        if (chat) {
          // Obtener los √∫ltimos mensajes del chat
          const messages = await chat.fetchMessages({ limit: 5 });
          const messageExists = messages.some(msg => msg.id._serialized === message.id._serialized);
          
          if (messageExists) {
            console.log(`‚úÖ ${type} CONFIRMADO en el chat`);
          } else {
            console.log(`‚ùå ${type} NO encontrado en el chat`);
          }
        }
        
      } catch (chatError: any) {
        console.log(`‚ö†Ô∏è No se pudo verificar ${type} en el chat:`, chatError.message);
      }
      
    } catch (error: any) {
      console.log(`‚ùå Error verificando entrega de ${type}:`, error.message);
    }
  }

  // M√©todo para preparar y sincronizar un chat antes del env√≠o
  private async prepareChat(chatId: string): Promise<void> {
    try {
      console.log(`üîÑ Preparando chat: ${chatId}`);
      
      // Intentar obtener el chat y forzar carga
      const chat = await this.client?.getChatById(chatId);
      
      if (chat) {
        console.log(`‚úÖ Chat preparado: ${chat.name || 'Sin nombre'}`);
        
        // Forzar carga de mensajes recientes para sincronizar
        try {
          await chat.fetchMessages({ limit: 1 });
          console.log(`‚úÖ Chat sincronizado correctamente`);
        } catch (fetchError: any) {
          console.log(`‚ö†Ô∏è No se pudieron cargar mensajes del chat:`, fetchError.message);
        }
        
        // Peque√±a pausa para estabilidad
        await new Promise(resolve => setTimeout(resolve, 1000));
        
      } else {
        console.log(`‚ö†Ô∏è No se pudo obtener el chat: ${chatId}`);
      }
      
    } catch (error: any) {
      console.log(`‚ùå Error preparando chat ${chatId}:`, error.message);
    }
  }

  // M√©todo para refrescar el cliente si est√° teniendo problemas
  async refreshClient(): Promise<void> {
    try {
      console.log('üîÑ Refrescando cliente WhatsApp...');
      
      if (this.client) {
        // Intentar reconectar sin destruir completamente
        await this.client.pupPage?.reload();
        console.log('‚úÖ P√°gina del cliente refrescada');
        
        // Esperar a que se estabilice
        await new Promise(resolve => setTimeout(resolve, 3000));
        
        const state = await this.client.getState();
        console.log('üì± Estado despu√©s del refresh:', state);
      }
    } catch (error: any) {
      console.log('‚ùå Error refrescando cliente:', error.message);
    }
  }

  // M√©todo para notificar cambios de conexi√≥n
  private notifyConnectionChange() {
    try {
      const status = this.getStatus();
      
      // Notificar cambio de estado a trav√©s de SSE
      notifyConnectionChange(status);
      
    } catch (error) {
      console.log('‚ö†Ô∏è Error en notifyConnectionChange:', error);
    }
  }
} 